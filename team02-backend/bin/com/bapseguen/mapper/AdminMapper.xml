<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<!-- ===================== 관리자 로그인 ===================== -->
	<select id="loginAdmin" parameterType="MemberDTO"
		resultType="int">
		SELECT MEMBER_NUMBER
		FROM TBL_MEMBER
		WHERE MEMBER_ID = #{memberId} AND MEMBER_PASSWORD = #{memberPassword} AND
		MEMBER_TYPE = 'ADMIN'
	</select>


	<!-- ===================== 배너 ===================== -->
	<!-- 배너 등록 -->
	<insert id="insertBanner" parameterType="BannerDTO">
		INSERT INTO TBL_BANNER
		(BANNER_NUMBER, BANNER_TITLE, ADMIN_IMAGE_NUMBER, BANNER_END_DATE,
		BANNER_IS_ACTIVE, MEMBER_NUMBER, BANNER_CREATED_DATE)
		VALUES
		(SEQ_BANNER_NUMBER.NEXTVAL, #{bannerTitle}, #{adminImageNumber}, #{bannerEndDate},
		NVL(#{bannerIsActive}, 'Y'), #{memberNumber}, SYSDATE)
	</insert>

	<!-- 배너 목록 조회 -->
	<select id="selectBannerList" resultType="BannerDTO">
		SELECT
		BANNER_NUMBER AS bannerNumber,
		BANNER_TITLE AS bannerTitle,
		ADMIN_IMAGE_NUMBER AS adminImageNumber,
		BANNER_END_DATE AS bannerEndDate,
		BANNER_IS_ACTIVE AS bannerIsActive,
		MEMBER_NUMBER AS memberNumber,
		BANNER_CREATED_DATE AS bannerCreatedDate,
		BANNER_UPDATED_DATE AS bannerUpdatedDate
		FROM TBL_BANNER
		ORDER BY BANNER_NUMBER DESC
	</select>

	<!-- 배너 수정 -->
	<update id="updateBanner" parameterType="BannerDTO">
		UPDATE TBL_BANNER
		SET BANNER_TITLE = #{bannerTitle},
		ADMIN_IMAGE_NUMBER = #{adminImageNumber},
		BANNER_END_DATE = #{bannerEndDate},
		BANNER_IS_ACTIVE = #{bannerIsActive},
		MEMBER_NUMBER = #{memberNumber},
		BANNER_UPDATED_DATE = SYSDATE
		WHERE BANNER_NUMBER = #{bannerNumber}
	</update>

	<!-- 배너 삭제 -->
	<delete id="deleteBanner" parameterType="int">
		DELETE FROM TBL_BANNER
		WHERE BANNER_NUMBER = #{bannerNumber}
	</delete>


	<!-- ===================== 고객센터 문의 ===================== -->
	<!-- 문의글 목록 조회 -->
	<select id="selectInquiryList" resultType="InquiryDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.MEMBER_NUMBER AS memberNumber,
		p.POST_TITLE AS postTitle,
		p.POST_CREATED_DATE AS postCreatedDate,
		i.INQUIRY_CONTENT AS inquiryContent,
		i.INQUIRY_STATUS AS inquiryStatus
		FROM TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_TYPE = 'INQUIRY'
		ORDER BY p.POST_NUMBER DESC
	</select>

	<!-- 문의글 상세 -->
	<select id="selectInquiryDetail" parameterType="int"
		resultType="InquiryDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.MEMBER_NUMBER AS memberNumber,
		p.POST_TITLE AS postTitle,
		p.POST_CREATED_DATE AS postCreatedDate,
		i.INQUIRY_CONTENT AS inquiryContent,
		i.INQUIRY_STATUS AS inquiryStatus
		FROM TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<!-- 문의글 댓글 작성 -->
	<!-- 이건 내일 수업 끝나고 진행하기 -->
	<!-- <insert id="insertInquiryComment" parameterType="CommentDTO"> INSERT 
		INTO TBL_COMMENT (COMMENT_NUMBER, POST_NUMBER, MEMBER_NUMBER, COMMENT_CONTENT, 
		COMMENTED_DATE, COMMENT_DELETE_STATE) VALUES (SEQ_COMMENT_NUMBER.NEXTVAL, 
		#{postNumber}, #{memberNumber}, #{commentContent}, SYSDATE, 'N') </insert> -->

	<!-- ===================== 공지 ===================== -->
	<!-- 공지글 작성(1): POST 생성 -->
	<!-- 큰 테이블인 POST에 있는 공통 속성부터 먼저 입력(재사용에 좋다고함) -->
	<insert id="insertNoticePost" parameterType="NoticeDTO">
		INSERT INTO TBL_POST
		(POST_NUMBER, MEMBER_NUMBER, POST_TITLE, POST_LIKE_COUNT, POST_VIEW_COUNT,
		POST_REPORT_COUNT, POST_DELETE_STATE, POST_CREATED_DATE, POST_TYPE)
		VALUES
		(SEQ_POST_NUMBER.NEXTVAL, #{memberNumber}, #{postTitle}, 0, 0, 0, 'N', SYSDATE, 'NOTICE')
	</insert>

	<!-- 공지글 작성(2): NOTICE 본문 (바로 직후 호출) -->
	<insert id="insertNotice" parameterType="NoticeDTO">
		INSERT INTO TBL_NOTICE
		(POST_NUMBER, NOTICE_CONTENT)
		VALUES
		(SEQ_POST_NUMBER.CURRVAL, #{noticeContent})
	</insert>

	<!-- 공지글 목록 -->
	<select id="selectNoticeList" resultType="NoticeDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.MEMBER_NUMBER AS memberNumber,
		p.POST_TITLE AS postTitle,
		p.POST_CREATED_DATE AS postCreatedDate,
		n.NOTICE_CONTENT AS noticeContent
		FROM TBL_POST p
		JOIN TBL_NOTICE n ON n.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_TYPE = 'NOTICE'
		ORDER BY p.POST_NUMBER DESC
	</select>

	<!-- 공지글 제목 수정 -->
	<update id="updateNoticeTitle" parameterType="NoticeDTO">
		UPDATE TBL_POST
		SET POST_TITLE = #{postTitle},
		POST_UPDATED_DATE = SYSDATE
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<!-- 공지글 본문 수정 -->
	<update id="updateNoticeContent" parameterType="NoticeDTO">
		UPDATE TBL_NOTICE
		SET NOTICE_CONTENT = #{noticeContent}
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<!-- 공지글 삭제 (POST 삭제하면 NOTICE는 CASCADE) -->
	<delete id="deleteNotice" parameterType="int">
		DELETE FROM TBL_POST
		WHERE POST_NUMBER = #{postNumber}
	</delete>


	<!-- ===================== FAQ ===================== -->
	<!-- FAQ 작성(1): POST 생성 -->
	<insert id="insertFaqPost" parameterType="FaqDTO">
		INSERT INTO TBL_POST
		(POST_NUMBER, MEMBER_NUMBER, POST_TITLE, POST_LIKE_COUNT, POST_VIEW_COUNT,
		POST_REPORT_COUNT, POST_DELETE_STATE, POST_CREATED_DATE, POST_TYPE)
		VALUES
		(SEQ_POST_NUMBER.NEXTVAL, #{memberNumber}, #{postTitle}, 0, 0, 0, 'N', SYSDATE, 'FAQ')
	</insert>

	<!-- FAQ 작성(2): FAQ 본문 -->
	<insert id="insertFaq" parameterType="FaqDTO">
		INSERT INTO TBL_FAQ
		(POST_NUMBER, FAQ_CONTENT)
		VALUES
		(SEQ_POST_NUMBER.CURRVAL, #{faqContent})
	</insert>

	<!-- FAQ 목록 -->
	<select id="selectFaqList" resultType="FaqDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.MEMBER_NUMBER AS memberNumber,
		p.POST_TITLE AS postTitle,
		p.POST_CREATED_DATE AS postCreatedDate,
		f.FAQ_CONTENT AS faqContent
		FROM TBL_POST p
		JOIN TBL_FAQ f ON f.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_TYPE = 'FAQ'
		ORDER BY p.POST_NUMBER DESC
	</select>

	<!-- FAQ 상세 -->
	<select id="selectFaqDetail" parameterType="int"
		resultType="FaqDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.MEMBER_NUMBER AS memberNumber,
		p.POST_TITLE AS postTitle,
		p.POST_CREATED_DATE AS postCreatedDate,
		f.FAQ_CONTENT AS faqContent
		FROM TBL_POST p
		JOIN TBL_FAQ f ON f.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<!-- FAQ 제목 수정 -->
	<update id="updateFaqTitle" parameterType="FaqDTO">
		UPDATE TBL_POST
		SET POST_TITLE = #{postTitle},
		POST_UPDATED_DATE = SYSDATE
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<!-- FAQ 본문 수정 -->
	<update id="updateFaqContent" parameterType="FaqDTO">
		UPDATE TBL_FAQ
		SET FAQ_CONTENT = #{faqContent}
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<!-- FAQ 삭제 -->
	<delete id="deleteFaq" parameterType="int">
		DELETE FROM TBL_POST
		WHERE POST_NUMBER = #{postNumber}
	</delete>


	<!-- ===================== 신고/정지/블랙리스트 ===================== -->
	<!-- 신고 목록 (PostReportDTO: 날짜 문자열 매핑) -->
	<select id="selectReportList" resultType="PostReportDTO">
		SELECT
		POST_REPORT_NUMBER AS postReportNumber,
		POST_NUMBER AS postNumber,
		POST_REPORT_REASON AS postReportReason,
		TO_CHAR(POST_REPORT_DATE,'YYYY-MM-DD') AS postReportDate,
		POST_REPORT_COUNT AS postReportCount,
		MEMBER_NUMBER AS memberNumber
		FROM TBL_POST_REPORT
		ORDER BY POST_REPORT_NUMBER DESC
	</select>

	<!-- 정지 회원 목록 -->
	<select id="selectSuspendList" resultType="MemberSuspendDTO">
		SELECT
		MEMBER_NUMBER AS memberNumber,
		SUSPEND_START_DATE AS suspendStartDate,
		SUSPEND_END_DATE AS suspendEndDate,
		SUSPEND_REPORT_COUNT AS suspendReportCount
		FROM TBL_MEMBER_SUSPEND
		ORDER BY SUSPEND_START_DATE DESC
	</select>

	<!-- 블랙리스트 목록 -->
	<select id="selectBlacklistList" resultType="MemberBlacklistDTO">
		SELECT
		BLACKLIST_NUMBER AS blacklistNumber,
		MEMBER_NUMBER AS memberNumber,
		BLACKLIST_START_DATE AS blacklistStartDate
		FROM TBL_MEMBER_BLACKLIST
		ORDER BY BLACKLIST_NUMBER DESC
	</select>
	<!-- 회원리스트 목록 -->
	<select id="selectMemberListList" resultType="MemberListDTO">
		SELECT
		M.MEMBER_NUMBER,
		M.MEMBER_ID,
		M.MEMBER_TYPE,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_NAME
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_NAME
		ELSE NULL
		END AS MEMBER_NAME,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_WARNING_COUNT
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_WARNING_COUNT
		ELSE NULL
		END AS WARNING_COUNT,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_TREE_GRADE
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_TREE_GRADE
		ELSE NULL
		END AS TREE_GRADE
		FROM TBL_MEMBER M
		LEFT JOIN TBL_GENERAL_MEMBER G ON M.MEMBER_NUMBER = G.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER S ON M.MEMBER_NUMBER = S.MEMBER_NUMBER
	</select>
	
	<select id="" resultType="int">
	SELECT count(*)
		M.MEMBER_NUMBER,
		M.MEMBER_ID,
		M.MEMBER_TYPE,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_NAME
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_NAME
		ELSE NULL
		END AS MEMBER_NAME,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_WARNING_COUNT
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_WARNING_COUNT
		ELSE NULL
		END AS WARNING_COUNT,
		CASE
		WHEN M.MEMBER_TYPE = 'GENERAL' THEN G.GENERAL_TREE_GRADE
		WHEN M.MEMBER_TYPE = 'SELLER' THEN S.SELLER_TREE_GRADE
		ELSE NULL
		END AS TREE_GRADE
		FROM TBL_MEMBER M
		LEFT JOIN TBL_GENERAL_MEMBER G ON M.MEMBER_NUMBER = G.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER S ON M.MEMBER_NUMBER = S.MEMBER_NUMBER
	</select>

</mapper>
