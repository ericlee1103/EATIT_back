<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">

	<!-- ===================== 관리자 로그인 ===================== -->
	<select id="loginAdmin" parameterType="AdminDTO"
		resultType="AdminDTO">
		SELECT
		ADMIN_NUMBER AS adminNumber,
		ADMIN_ID AS adminId,
		ADMIN_PASSWORD AS adminPassword,
		ADMIN_TREE_GRADE AS adminTreeGrade
		FROM TBL_ADMIN
		WHERE ADMIN_ID = #{adminId}
		AND ADMIN_PASSWORD =
		#{adminPassword}
	</select>

	<!-- ===================== 공지/이벤트(Notice) ===================== -->
	<insert id="insertNoticePost" parameterType="AdminPostDTO">
		<selectKey resultType="int" keyProperty="postNumber"
			order="BEFORE">
			SELECT SEQ_POST_NUMBER.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TBL_POST
		(POST_NUMBER, MEMBER_NUMBER, ADMIN_NUMBER,
		POST_TITLE, POST_LIKE_COUNT, POST_VIEW_COUNT,
		POST_REPORT_COUNT,
		POST_DELETE_STATE, POST_CREATED_DATE, POST_TYPE)
		VALUES
		(#{postNumber},
		NULL, #{adminNumber}, #{postTitle},
		0, 0, 0, 'N', SYSDATE, 'NOTICE')
	</insert>

	<insert id="insertNotice" parameterType="AdminPostDTO">
		INSERT INTO TBL_NOTICE
		(POST_NUMBER, NOTICE_CONTENT)
		VALUES (#{postNumber}, #{noticeContent})
	</insert>

	<select id="selectNoticeList" parameterType="map"
		resultType="AdminPostDTO">
		SELECT * FROM (
		SELECT ROWNUM rn, A.*
		FROM (
		SELECT
		p.POST_NUMBER AS
		postNumber,
		p.POST_TITLE AS postTitle,
		TO_CHAR(p.POST_CREATED_DATE,
		'YYYY-MM-DD') AS postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE,
		'YYYY-MM-DD') AS postUpdatedDate,
		p.POST_TYPE AS postType,
		n.NOTICE_CONTENT AS noticeContent,
		a.ADMIN_NUMBER AS adminNumber,
		a.ADMIN_ID AS adminId,
		a.ADMIN_TREE_GRADE AS adminTreeGrade
		FROM
		TBL_POST p
		JOIN TBL_NOTICE n ON n.POST_NUMBER = p.POST_NUMBER
		JOIN
		TBL_ADMIN a ON a.ADMIN_NUMBER = p.ADMIN_NUMBER
		WHERE p.POST_TYPE =
		'NOTICE'
		<if test="searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>
		ORDER BY p.POST_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rn
		&gt;= #{startRow}
	</select>


	<select id="countNotices" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_NOTICE n ON n.POST_NUMBER =
		p.POST_NUMBER
		WHERE p.POST_TYPE = 'NOTICE'
		<if test="searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>
	</select>

	<select id="selectNoticeDetail" parameterType="int"
		resultType="AdminPostDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS
		postTitle,
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS
		postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE, 'YYYY-MM-DD') AS
		postUpdatedDate,
		p.POST_TYPE AS postType,
		n.NOTICE_CONTENT AS
		noticeContent,
		a.ADMIN_NUMBER AS adminNumber,
		a.ADMIN_ID AS adminId,
		a.ADMIN_TREE_GRADE AS adminTreeGrade
		FROM TBL_POST p
		JOIN TBL_NOTICE n
		ON n.POST_NUMBER = p.POST_NUMBER
		JOIN TBL_ADMIN a ON a.ADMIN_NUMBER =
		p.ADMIN_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<update id="updateNoticeTitle" parameterType="AdminPostDTO">
		UPDATE TBL_POST
		SET
		POST_TITLE = #{postTitle},
		POST_UPDATED_DATE = SYSDATE
		WHERE POST_NUMBER
		= #{postNumber}
	</update>

	<update id="updateNoticeContent" parameterType="AdminPostDTO">
		UPDATE TBL_NOTICE
		SET NOTICE_CONTENT = #{noticeContent}
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<delete id="deleteNotice" parameterType="int">
		DELETE FROM TBL_POST
		WHERE POST_NUMBER = #{postNumber}
	</delete>

	<!-- ===================== FAQ ===================== -->
	<insert id="insertFaqPost" parameterType="AdminPostDTO">
		<selectKey resultType="int" keyProperty="postNumber"
			order="BEFORE">
			SELECT SEQ_POST_NUMBER.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TBL_POST
		(POST_NUMBER, MEMBER_NUMBER, ADMIN_NUMBER,
		POST_TITLE, POST_LIKE_COUNT, POST_VIEW_COUNT,
		POST_REPORT_COUNT,
		POST_DELETE_STATE, POST_CREATED_DATE, POST_TYPE)
		VALUES
		(#{postNumber},
		NULL, #{adminNumber}, #{postTitle},
		0, 0, 0, 'N', SYSDATE, 'FAQ')
	</insert>

	<insert id="insertFaq" parameterType="AdminPostDTO">
		INSERT INTO TBL_FAQ
		(POST_NUMBER, FAQ_CONTENT)
		VALUES
		(#{postNumber}, #{faqContent})
	</insert>

	<select id="selectFaqList" parameterType="map"
		resultType="AdminPostDTO">
		SELECT * FROM (
		SELECT ROWNUM AS rowNumber, A.* FROM (
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS postTitle,
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE, 'YYYY-MM-DD') AS postUpdatedDate,
		p.POST_TYPE AS postType,
		f.FAQ_CONTENT AS faqContent,
		a.ADMIN_NUMBER AS
		adminNumber,
		a.ADMIN_ID AS adminId,
		a.ADMIN_TREE_GRADE AS adminTreeGrade
		FROM TBL_POST p
		JOIN TBL_FAQ f ON f.POST_NUMBER = p.POST_NUMBER
		JOIN
		TBL_ADMIN a ON a.ADMIN_NUMBER = p.ADMIN_NUMBER
		WHERE p.POST_TYPE =
		'FAQ'
		<if test="searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>
		ORDER BY p.POST_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		rowNumber &gt;= #{startRow}
	</select>

	<select id="countFaqs" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_FAQ f ON f.POST_NUMBER =
		p.POST_NUMBER
		WHERE p.POST_TYPE = 'FAQ'
		<if test="searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>
	</select>

	<select id="selectFaqDetail" parameterType="int"
		resultType="AdminPostDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS
		postTitle,
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS
		postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE, 'YYYY-MM-DD') AS
		postUpdatedDate,
		p.POST_TYPE AS postType,
		f.FAQ_CONTENT AS faqContent,
		a.ADMIN_NUMBER AS adminNumber,
		a.ADMIN_ID AS adminId,
		a.ADMIN_TREE_GRADE AS adminTreeGrade
		FROM TBL_POST p
		JOIN TBL_FAQ f ON
		f.POST_NUMBER = p.POST_NUMBER
		JOIN TBL_ADMIN a ON a.ADMIN_NUMBER =
		p.ADMIN_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<update id="updateFaqTitle" parameterType="AdminPostDTO">
		UPDATE TBL_POST
		SET
		POST_TITLE = #{postTitle},
		POST_UPDATED_DATE = SYSDATE
		WHERE POST_NUMBER
		= #{postNumber}
	</update>

	<update id="updateFaqContent" parameterType="AdminPostDTO">
		UPDATE TBL_FAQ
		SET
		FAQ_CONTENT = #{faqContent}
		WHERE
		POST_NUMBER = #{postNumber}
	</update>

	<delete id="deleteFaq" parameterType="int">
		DELETE FROM TBL_POST WHERE
		POST_NUMBER = #{postNumber}
	</delete>


	<!-- ===================== 관리자 이미지 ===================== -->
	<insert id="insertAdminImage" parameterType="AdminImageDTO">
		INSERT INTO
		TBL_ADMIN_IMAGE
		(ADMIN_IMAGE_NUMBER, ADMIN_IMAGE_SYSTEM_NAME,
		ADMIN_IMAGE_ORIGINAL_NAME, ADMIN_NUMBER, POST_NUMBER)
		VALUES
		(SEQ_ADMIN_IMAGE_NUMBER.NEXTVAL,
		#{adminImageSystemName},
		#{adminImageOriginalName},
		#{adminNumber}, #{postNumber})
	</insert>

	<select id="selectAdminImagesByPost" parameterType="int"
		resultType="AdminImageDTO">
		SELECT
		ADMIN_IMAGE_NUMBER AS adminImageNumber,
		ADMIN_IMAGE_SYSTEM_NAME AS adminImageSystemName,
		ADMIN_IMAGE_ORIGINAL_NAME AS adminImageOriginalName,
		ADMIN_NUMBER AS
		adminNumber,
		POST_NUMBER AS postNumber
		FROM TBL_ADMIN_IMAGE
		WHERE
		POST_NUMBER = #{postNumber}
	</select>

	<delete id="deleteAdminImagesByPost" parameterType="int">
		DELETE FROM
		TBL_ADMIN_IMAGE WHERE POST_NUMBER = #{postNumber}
	</delete>

	<!-- ===================== 문의(Inquiry) ===================== -->
	<select id="selectInquiryList" parameterType="map"
		resultType="AdminPostDTO">
		SELECT * FROM (
		SELECT ROWNUM AS rowNumber, A.*
		FROM (
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS postTitle,
		TO_CHAR(p.POST_CREATED_DATE,'YYYY-MM-DD') AS postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE,'YYYY-MM-DD') AS postUpdatedDate,
		p.POST_TYPE AS postType,
		i.INQUIRY_CONTENT AS inquiryContent,
		i.INQUIRY_STATUS AS inquiryStatus,
		m.MEMBER_NUMBER AS memberNumber,
		m.MEMBER_ID AS memberId,
		CASE m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_NAME
		WHEN 'SELLER' THEN s.SELLER_NAME
		END AS memberName
		FROM
		TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER = p.POST_NUMBER
		JOIN
		TBL_MEMBER m ON m.MEMBER_NUMBER = p.MEMBER_NUMBER
		LEFT JOIN
		TBL_GENERAL_MEMBER g ON g.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN
		TBL_SELLER_MEMBER s ON s.MEMBER_NUMBER = m.MEMBER_NUMBER
		WHERE
		p.POST_TYPE = 'INQUIRY'

		<!-- 제목 검색 -->
		<if
			test="searchType eq 'title' and searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>

		<!-- 작성자 검색 -->
		<if
			test="searchType eq 'memberId' and searchWord != null and searchWord != ''">
			AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
		</if>

		<!-- 날짜 검색 -->
		<if
			test="searchType eq 'date' and startDate != null and endDate != null">
			AND p.POST_CREATED_DATE &gt;= TO_DATE(#{startDate},
			'YYYY-MM-DD')
			AND p.POST_CREATED_DATE &lt; TO_DATE(#{endDate},
			'YYYY-MM-DD') + 1
		</if>

		<!-- 상태 검색 -->
		<if
			test="searchType eq 'status' and searchWord != null and searchWord != ''">
			AND i.INQUIRY_STATUS = #{searchWord}
		</if>

		ORDER BY p.POST_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		rowNumber &gt;= #{startRow}
	</select>




	<select id="countInquiries" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER =
		p.POST_NUMBER
		JOIN TBL_MEMBER m ON m.MEMBER_NUMBER = p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'INQUIRY'

		<!-- 제목 검색 -->
		<if
			test="searchType eq 'title' and searchWord != null and searchWord != ''">
			AND p.POST_TITLE LIKE '%' || #{searchWord} || '%'
		</if>

		<!-- 작성자 검색 -->
		<if
			test="searchType eq 'memberId' and searchWord != null and searchWord != ''">
			AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
		</if>

		<!-- 날짜 검색 -->
		<if
			test="searchType eq 'date' and startDate != null and endDate != null">
			AND p.POST_CREATED_DATE &gt;= TO_DATE(#{startDate},
			'YYYY-MM-DD')
			AND p.POST_CREATED_DATE &lt; TO_DATE(#{endDate},
			'YYYY-MM-DD') + 1
		</if>

		<!-- 상태 검색 -->
		<if
			test="searchType eq 'status' and searchWord != null and searchWord != ''">
			AND i.INQUIRY_STATUS = #{searchWord}
		</if>
	</select>





	<select id="selectInquiryDetail" parameterType="int"
		resultType="AdminPostDTO">
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS
		postTitle,
		TO_CHAR(p.POST_CREATED_DATE,'YYYY-MM-DD') AS
		postCreatedDate,
		TO_CHAR(p.POST_UPDATED_DATE,'YYYY-MM-DD') AS
		postUpdatedDate,
		p.POST_TYPE AS postType,
		i.INQUIRY_CONTENT AS
		inquiryContent,
		i.INQUIRY_STATUS AS inquiryStatus,
		i.ANSWER_CONTENT AS
		answerContent,
		TO_CHAR(i.ANSWER_DATE,'YYYY-MM-DD') AS answerDate,
		m.MEMBER_NUMBER AS memberNumber,
		m.MEMBER_ID AS memberId
		FROM TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER = p.POST_NUMBER
		JOIN TBL_MEMBER m
		ON m.MEMBER_NUMBER = p.MEMBER_NUMBER
		WHERE p.POST_NUMBER =
		#{postNumber}
	</select>


	<update id="updateInquiryStatus" parameterType="AdminPostDTO">
		UPDATE
		TBL_INQUIRY
		SET INQUIRY_STATUS = #{inquiryStatus}
		WHERE POST_NUMBER =
		#{postNumber}
	</update>



	<!-- 답변 등록 & 수정 -->
	<update id="updateInquiryAnswer" parameterType="AdminPostDTO">
		UPDATE
		TBL_INQUIRY
		SET ANSWER_CONTENT = #{answerContent},
		ANSWER_DATE =
		SYSDATE,
		INQUIRY_STATUS = 'IN_PROGRESS'
		WHERE POST_NUMBER
		= #{postNumber}
	</update>

	<!-- 답변 삭제 -->
	<update id="deleteInquiryAnswer" parameterType="int">
		UPDATE
		TBL_INQUIRY
		SET ANSWER_CONTENT = NULL,
		ANSWER_DATE = NULL,
		INQUIRY_STATUS = 'YET'
		WHERE POST_NUMBER = #{postNumber}
	</update>

	<!-- ===================== 신고 / 정지 / 블랙리스트 ===================== -->

	<!-- 신고 목록 (검색 + 페이징) -->
	<select id="selectReportListPaged" parameterType="map"
		resultType="com.bapseguen.app.dto.PostReportDTO">
		SELECT *
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT
		r.POST_REPORT_NUMBER AS
		postReportNumber,
		r.POST_NUMBER AS postNumber,
		p.POST_TITLE AS
		postTitle,
		r.POST_REPORT_REASON AS postReportReason,
		TO_CHAR(r.POST_REPORT_DATE,'YYYY-MM-DD') AS postReportDate,
		r.POST_REPORT_COUNT AS postReportCount,
		r.MEMBER_NUMBER AS
		memberNumber,
		reporter.MEMBER_ID AS reporterId,
		m.MEMBER_NUMBER AS
		reportedNumber,
		NVL(g.GENERAL_NAME, s.SELLER_NAME) AS reportedName,
		m.MEMBER_TYPE AS reportedType
		FROM TBL_POST_REPORT r
		JOIN TBL_POST p ON
		r.POST_NUMBER = p.POST_NUMBER
		JOIN TBL_MEMBER reporter ON
		r.MEMBER_NUMBER = reporter.MEMBER_NUMBER
		JOIN TBL_MEMBER m ON
		p.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN TBL_GENERAL_MEMBER g ON
		m.MEMBER_NUMBER = g.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER s ON
		m.MEMBER_NUMBER = s.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'reported'">
				AND NVL(g.GENERAL_NAME, s.SELLER_NAME) LIKE '%' ||
				#{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'reporter'">
				AND reporter.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
		</where>
		ORDER BY r.POST_REPORT_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE RN &gt;= #{startRow}
	</select>

	<!-- 신고목록 조회 -->
	<select id="selectReportList"
		resultType="com.bapseguen.app.dto.ReportDTO">
		SELECT
		r.POST_REPORT_NUMBER,
		r.POST_NUMBER,
		r.POST_REPORT_REASON,
		r.POST_REPORT_DATE,
		r.MEMBER_NUMBER AS reporterNumber,
		reporter.MEMBER_ID AS reporterId,
		p.POST_TITLE AS postTitle,
		reported.MEMBER_NUMBER AS reportedNumber,
		reported.MEMBER_ID AS reportedName,
		reported.MEMBER_TYPE AS reportedType,
		CASE WHEN s.MEMBER_NUMBER IS NOT NULL THEN 1 ELSE 0 END AS isSuspended,
		CASE WHEN b.MEMBER_NUMBER IS NOT NULL THEN 1 ELSE 0 END AS
		isBlacklisted
		FROM TBL_POST_REPORT r
		JOIN TBL_MEMBER reporter
		ON r.MEMBER_NUMBER = reporter.MEMBER_NUMBER
		JOIN TBL_POST p
		ON r.POST_NUMBER = p.POST_NUMBER
		JOIN TBL_MEMBER reported
		ON p.MEMBER_NUMBER = reported.MEMBER_NUMBER
		LEFT JOIN TBL_MEMBER_SUSPEND s
		ON reported.MEMBER_NUMBER = s.MEMBER_NUMBER
		LEFT JOIN TBL_MEMBER_BLACKLIST b
		ON reported.MEMBER_NUMBER = b.MEMBER_NUMBER
		ORDER BY r.POST_REPORT_NUMBER DESC
	</select>






	<!-- 신고 개수 (검색/페이징용) -->
	<select id="countReportList" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST_REPORT r
		LEFT JOIN TBL_MEMBER m ON
		r.MEMBER_NUMBER = m.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'reported'">
				AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'reporter'">
				AND r.MEMBER_NUMBER LIKE '%' || #{searchWord} || '%'
			</if>
		</where>
	</select>


	<!-- 정지 회원 목록 (검색 + 페이징) -->
	<select id="selectSuspendList" parameterType="map"
		resultType="com.bapseguen.app.dto.MemberSuspendDTO">
		SELECT * FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT
		s.MEMBER_NUMBER AS
		memberNumber,
		NVL(g.GENERAL_NAME, sm.SELLER_NAME) AS memberName,
		m.MEMBER_TYPE AS memberType,
		TO_CHAR(s.SUSPEND_START_DATE,'YYYY-MM-DD') AS suspendStartDate,
		TO_CHAR(s.SUSPEND_END_DATE,'YYYY-MM-DD') AS suspendEndDate,
		s.SUSPEND_REPORT_COUNT AS suspendReportCount
		FROM TBL_MEMBER_SUSPEND s
		JOIN TBL_MEMBER m ON s.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN
		TBL_GENERAL_MEMBER g ON m.MEMBER_NUMBER = g.MEMBER_NUMBER
		LEFT JOIN
		TBL_SELLER_MEMBER sm ON m.MEMBER_NUMBER = sm.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'id'">
				AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'name'">
				AND (NVL(g.GENERAL_NAME, sm.SELLER_NAME) LIKE '%' ||
				#{searchWord} ||
				'%')
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'type'">
				AND m.MEMBER_TYPE = #{searchWord}
			</if>
		</where>
		ORDER BY s.SUSPEND_START_DATE DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE RN &gt;= #{startRow}
	</select>

	<!-- 정지 회원 전체 수 (검색/페이징용) -->
	<select id="countSuspendList" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_MEMBER_SUSPEND s
		JOIN TBL_MEMBER m ON
		s.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN TBL_GENERAL_MEMBER g ON
		m.MEMBER_NUMBER = g.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER sm ON
		m.MEMBER_NUMBER = sm.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'id'">
				AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'name'">
				AND (NVL(g.GENERAL_NAME, sm.SELLER_NAME) LIKE '%' ||
				#{searchWord} ||
				'%')
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'type'">
				AND m.MEMBER_TYPE = #{searchWord}
			</if>
		</where>
	</select>


	<!-- 블랙리스트 목록 (검색 + 페이징) -->
	<select id="selectBlacklistList" parameterType="map"
		resultType="com.bapseguen.app.dto.MemberBlacklistDTO">
		SELECT *
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT
		b.BLACKLIST_NUMBER AS
		blacklistNumber,
		b.MEMBER_NUMBER AS memberNumber,
		NVL(g.GENERAL_NAME,
		sm.SELLER_NAME) AS memberName,
		m.MEMBER_TYPE AS memberType,
		TO_CHAR(b.BLACKLIST_START_DATE,'YYYY-MM-DD') AS blacklistStartDate
		FROM TBL_MEMBER_BLACKLIST b
		JOIN TBL_MEMBER m ON b.MEMBER_NUMBER =
		m.MEMBER_NUMBER
		LEFT JOIN TBL_GENERAL_MEMBER g ON m.MEMBER_NUMBER =
		g.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER sm ON m.MEMBER_NUMBER =
		sm.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'id'">
				AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'name'">
				AND (NVL(g.GENERAL_NAME, sm.SELLER_NAME) LIKE '%' ||
				#{searchWord} ||
				'%')
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'type'">
				AND m.MEMBER_TYPE = #{searchWord}
			</if>
		</where>
		ORDER BY b.BLACKLIST_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		RN &gt;= #{startRow}
	</select>

	<!-- 블랙리스트 전체 수 (검색/페이징용) -->
	<select id="countBlacklistList" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_MEMBER_BLACKLIST b
		JOIN TBL_MEMBER m ON
		b.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN TBL_GENERAL_MEMBER g ON
		m.MEMBER_NUMBER = g.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER sm ON
		m.MEMBER_NUMBER = sm.MEMBER_NUMBER
		<where>
			<if
				test="searchType != null and searchWord != null and searchType == 'id'">
				AND m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'name'">
				AND (NVL(g.GENERAL_NAME, sm.SELLER_NAME) LIKE '%' ||
				#{searchWord} ||
				'%')
			</if>
			<if
				test="searchType != null and searchWord != null and searchType == 'type'">
				AND m.MEMBER_TYPE = #{searchWord}
			</if>
		</where>
	</select>


	<!-- 정지 등록 -->
	<insert id="insertSuspend"
		parameterType="com.bapseguen.app.dto.MemberSuspendDTO">
		INSERT INTO TBL_MEMBER_SUSPEND
		(MEMBER_NUMBER,
		SUSPEND_START_DATE, SUSPEND_END_DATE, SUSPEND_REPORT_COUNT)
		VALUES
		(#{memberNumber}, SYSDATE, #{suspendEndDate}, #{suspendReportCount})
	</insert>

	<!-- 블랙리스트 등록 -->
	<insert id="insertBlacklist"
		parameterType="com.bapseguen.app.dto.MemberBlacklistDTO">
		<selectKey resultType="int" keyProperty="blacklistNumber"
			order="BEFORE">
			SELECT SEQ_MEMBER_BLACKLIST_NUMBER.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TBL_MEMBER_BLACKLIST
		(BLACKLIST_NUMBER, MEMBER_NUMBER,
		BLACKLIST_START_DATE)
		VALUES (#{blacklistNumber}, #{memberNumber},
		SYSDATE)
	</insert>

	<!-- 정지 만료 처리 -->
	<delete id="clearExpiredSuspends">
		DELETE FROM TBL_MEMBER_SUSPEND
		WHERE SUSPEND_END_DATE
		&lt; SYSDATE
	</delete>

	<!-- 특정 회원 정지 여부 확인 -->
	<select id="checkSuspend" parameterType="int" resultType="int">
		SELECT
		COUNT(*)
		FROM TBL_MEMBER_SUSPEND
		WHERE MEMBER_NUMBER = #{memberNumber}
		AND SYSDATE BETWEEN SUSPEND_START_DATE AND SUSPEND_END_DATE
	</select>

	<!-- 특정 회원 블랙리스트 여부 확인 -->
	<select id="checkBlacklist" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM TBL_MEMBER_BLACKLIST
		WHERE MEMBER_NUMBER =
		#{memberNumber}
	</select>

	<!-- 블랙리스트 해제 -->
	<delete id="deleteBlacklist" parameterType="int">
		DELETE FROM
		TBL_MEMBER_BLACKLIST
		WHERE BLACKLIST_NUMBER = #{blacklistNumber}
	</delete>

	<!-- 정지 회원 해제 -->
	<delete id="deleteSuspend" parameterType="map">
		DELETE FROM
		TBL_MEMBER_SUSPEND
		WHERE MEMBER_NUMBER = #{memberNumber}
		AND
		TRUNC(SUSPEND_START_DATE) = TO_DATE(#{suspendStartDate},
		'YYYY-MM-DD')
	</delete>


	<!-- ===================== 회원 관리 ===================== -->
	<!-- 회원 목록 -->
	<select id="selectMemberList" parameterType="map"
		resultType="map">
		SELECT * FROM (
		SELECT ROWNUM AS rowNumber, A.*
		FROM (
		SELECT
		m.MEMBER_NUMBER AS memberNumber,
		m.MEMBER_TYPE AS memberType,
		m.MEMBER_ID AS memberId,
		CASE m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_NAME
		WHEN 'SELLER' THEN s.SELLER_NAME
		ELSE m.MEMBER_ID
		END AS
		memberName,
		COALESCE(g.GENERAL_WARNING_COUNT, s.SELLER_WARNING_COUNT,
		0) AS warningCount,
		COALESCE(g.GENERAL_TREE_GRADE, s.SELLER_TREE_GRADE,
		'') AS treeGrade,
		COALESCE(g.GENERAL_PAYMENT_AMOUNT,
		s.SELLER_PAYMENT_AMOUNT, 0) AS
		paymentAmount
		FROM TBL_MEMBER m
		LEFT JOIN
		TBL_GENERAL_MEMBER g ON g.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN
		TBL_SELLER_MEMBER s ON s.MEMBER_NUMBER = m.MEMBER_NUMBER
		<where>
			<choose>
				<!-- 아이디 검색 -->
				<when
					test="searchType == 'id' and searchWord != null and searchWord != ''">
					m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
				</when>
				<!-- 이름 검색 -->
				<when
					test="searchType == 'name' and searchWord != null and searchWord != ''">
					(CASE m.MEMBER_TYPE
					WHEN 'GENERAL' THEN g.GENERAL_NAME
					WHEN
					'SELLER' THEN s.SELLER_NAME
					ELSE m.MEMBER_ID
					END) LIKE '%' ||
					#{searchWord} || '%'
				</when>
				<!-- 유형 검색 -->
				<when
					test="searchType == 'type' and memberType != null and memberType != ''">
					m.MEMBER_TYPE = #{memberType}
				</when>
			</choose>
		</where>
		ORDER BY m.MEMBER_NUMBER DESC
		) A
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE
		rowNumber &gt;= #{startRow}
	</select>

	<!-- 회원 수 (검색 조건 반영) -->
	<select id="countMembers" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM TBL_MEMBER m
		LEFT JOIN TBL_GENERAL_MEMBER g ON
		g.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER s ON
		s.MEMBER_NUMBER = m.MEMBER_NUMBER
		<where>
			<choose>
				<!-- 아이디 검색 -->
				<when
					test="searchType == 'id' and searchWord != null and searchWord != ''">
					m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
				</when>
				<!-- 이름 검색 -->
				<when
					test="searchType == 'name' and searchWord != null and searchWord != ''">
					(CASE m.MEMBER_TYPE
					WHEN 'GENERAL' THEN g.GENERAL_NAME
					WHEN
					'SELLER' THEN s.SELLER_NAME
					ELSE m.MEMBER_ID
					END) LIKE '%' ||
					#{searchWord} || '%'
				</when>
				<!-- 유형 검색 -->
				<when
					test="searchType == 'type' and memberType != null and memberType != ''">
					m.MEMBER_TYPE = #{memberType}
				</when>
			</choose>
		</where>
	</select>


	<select id="selectMemberDetail" parameterType="int"
		resultType="map">
		SELECT
		m.MEMBER_NUMBER AS "memberNumber",
		m.MEMBER_TYPE AS
		"memberType",
		m.MEMBER_ID AS "memberId",
		CASE m.MEMBER_TYPE
		WHEN
		'GENERAL'
		THEN g.GENERAL_NAME
		WHEN 'SELLER' THEN s.SELLER_NAME
		ELSE
		m.MEMBER_ID
		END
		AS "memberName",
		CASE m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_PHONE_NUMBER
		WHEN 'SELLER' THEN s.SELLER_PHONE_NUMBER
		END AS
		"phoneNumber",
		CASE
		m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_TREE_GRADE
		WHEN 'SELLER' THEN s.SELLER_TREE_GRADE
		END AS
		"treeGrade",
		CASE
		m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_PAYMENT_AMOUNT
		WHEN 'SELLER'
		THEN s.SELLER_PAYMENT_AMOUNT
		END
		AS "paymentAmount",
		CASE
		m.MEMBER_TYPE
		WHEN 'GENERAL' THEN
		g.GENERAL_WARNING_COUNT
		WHEN 'SELLER' THEN
		s.SELLER_WARNING_COUNT
		END AS
		"warningCount"
		FROM
		TBL_MEMBER m
		LEFT JOIN
		TBL_GENERAL_MEMBER g ON
		g.MEMBER_NUMBER =
		m.MEMBER_NUMBER
		LEFT JOIN
		TBL_SELLER_MEMBER s ON
		s.MEMBER_NUMBER =
		m.MEMBER_NUMBER
		WHERE
		m.MEMBER_NUMBER =
		#{memberNumber}
	</select>

	<select id="memberListCount" resultType="int">
		SELECT COUNT(*) FROM
		TBL_MEMBER
	</select>

	<!-- 일반회원 수 -->
	<select id="countGeneralMembers" resultType="int">
		SELECT COUNT(*) FROM
		TBL_MEMBER WHERE MEMBER_TYPE = 'GENERAL'
	</select>

	<!-- 판매자 수 -->
	<select id="countSellerMembers" resultType="int">
		SELECT COUNT(*) FROM
		TBL_MEMBER WHERE MEMBER_TYPE = 'SELLER'
	</select>


	<!-- 월별 회원 가입 수 -->
	<select id="countMonthlyMembers" resultType="map">
		SELECT
		TO_CHAR(NVL(g.GENERAL_JOIN_DATE, s.SELLER_JOIN_DATE), 'YYYY-MM') AS
		month,
		COUNT(*) AS count
		FROM TBL_MEMBER m
		LEFT JOIN TBL_GENERAL_MEMBER g
		ON g.MEMBER_NUMBER = m.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER s ON
		s.MEMBER_NUMBER = m.MEMBER_NUMBER
		GROUP BY
		TO_CHAR(NVL(g.GENERAL_JOIN_DATE, s.SELLER_JOIN_DATE), 'YYYY-MM')
		ORDER
		BY month
	</select>

	<!-- 월별 주문/매출 -->
	<select id="countMonthlyOrders" resultType="map">
		SELECT
		TO_CHAR(ORDERS_DATE, 'YYYY-MM') AS month,
		COUNT(*) AS orderCount,
		SUM(ORDERS_TOTAL_AMOUNT) AS totalSales
		FROM TBL_ORDERS
		GROUP BY
		TO_CHAR(ORDERS_DATE, 'YYYY-MM')
		ORDER BY month
	</select>

	<!-- 카테고리별 매출 -->
	<select id="countCategorySales" resultType="map">
		SELECT i.ITEM_TYPE AS
		category,
		SUM(oi.ORDER_ITEM_UNIT_PRICE * oi.ORDER_ITEM_QUANTITY) AS
		sales
		FROM TBL_ORDER_ITEM oi
		JOIN TBL_ITEM i ON i.ITEM_NUMBER =
		oi.ITEM_NUMBER
		GROUP BY i.ITEM_TYPE
	</select>

	<!-- ===================== 대시보드 - 카테고리별 매출 ===================== -->
	<select id="countSalesByCategory" resultType="map">
		SELECT CASE
		i.ITEM_TYPE
		WHEN 'FOOD' THEN '완제품'
		WHEN 'INGREDIENT' THEN '재료'
		END AS
		category,
		SUM(oI.ORDER_ITEM_UNIT_PRICE * oI.ORDER_ITEM_QUANTITY) AS
		totalSales
		FROM TBL_ORDER_ITEM oI
		JOIN TBL_ITEM i ON i.ITEM_NUMBER =
		oI.ITEM_NUMBER
		JOIN TBL_ORDERS o ON o.ORDERS_NUMBER = oI.ORDERS_NUMBER
		GROUP BY i.ITEM_TYPE
		ORDER BY totalSales DESC
	</select>

	<select id="countUnansweredInquiries" resultType="int">
		SELECT COUNT(*)
		FROM TBL_INQUIRY i
		JOIN TBL_POST p ON p.POST_NUMBER = i.POST_NUMBER
		WHERE p.POST_TYPE = 'INQUIRY'
		AND i.INQUIRY_STATUS IN
		('YET','IN_PROGRESS')
	</select>

	<select id="countReports" resultType="int">
		SELECT COUNT(*) FROM
		TBL_POST_REPORT
	</select>

	<select id="selectRecentInquiries"
		resultType="com.bapseguen.app.dto.view.AdminPostDTO">
		SELECT * FROM (
		SELECT p.POST_NUMBER, p.POST_TITLE, i.INQUIRY_STATUS
		FROM TBL_POST p
		JOIN TBL_INQUIRY i ON i.POST_NUMBER = p.POST_NUMBER
		WHERE p.POST_TYPE = 'INQUIRY'
		ORDER BY p.POST_CREATED_DATE DESC
		)
		WHERE
		ROWNUM <![CDATA[ <= ]]>
		3
	</select>

	<select id="selectRecentReports" resultType="PostReportDTO">
		SELECT * FROM (
		SELECT r.POST_REPORT_REASON, r.POST_REPORT_DATE
		FROM
		TBL_POST_REPORT r
		ORDER BY r.POST_REPORT_DATE DESC
		)
		WHERE ROWNUM <![CDATA[ <= ]]>
		3
	</select>

	<update id="giveGeneralWarning" parameterType="int">
		UPDATE
		TBL_GENERAL_MEMBER
		SET GENERAL_WARNING_COUNT =
		NVL(GENERAL_WARNING_COUNT, 0) + 1
		WHERE MEMBER_NUMBER = #{memberNumber}
	</update>

	<update id="giveSellerWarning" parameterType="int">
		UPDATE
		TBL_SELLER_MEMBER
		SET SELLER_WARNING_COUNT =
		NVL(SELLER_WARNING_COUNT,0)
		+ 1
		WHERE MEMBER_NUMBER = #{memberNumber}
	</update>

	<!-- ================= 자유게시판 ================= -->
	<!-- 자유게시판 목록 -->
	<select id="selectBoardFreeList" parameterType="map"
		resultType="map">
		SELECT *
		FROM (
		SELECT ROWNUM rn, a.*
		FROM (
		SELECT
		p.POST_NUMBER AS
		"postNumber",
		p.POST_TITLE AS "postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS "postViewCount",
		p.POST_LIKE_COUNT AS
		"postLikeCount"
		FROM TBL_POST p
		JOIN TBL_FREE_BOARD f ON f.POST_NUMBER =
		p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER =
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'FREE'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
		ORDER BY p.POST_NUMBER DESC
		) a
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rn
		&gt;= #{startRow}
	</select>

	<!-- 자유게시판 전체 글 개수 -->
	<select id="countBoardFree" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_FREE_BOARD f ON f.POST_NUMBER =
		p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER =
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'FREE'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
	</select>

	<!-- 자유게시판 상세 -->
	<select id="selectBoardFreeDetail" parameterType="int"
		resultType="map">
		SELECT
		p.POST_NUMBER AS "postNumber",
		p.POST_TITLE AS
		"postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE,
		'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS
		"postViewCount",
		p.POST_LIKE_COUNT AS "postLikeCount",
		f.FREE_CONTENT AS
		"freeContent"
		FROM TBL_POST p
		JOIN TBL_FREE_BOARD f ON f.POST_NUMBER
		=
		p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER =
		p.MEMBER_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<!-- 자유게시판 삭제 -->
	<delete id="deleteBoardFree" parameterType="int">
		DELETE FROM TBL_POST
		WHERE POST_NUMBER = #{postNumber}
	</delete>

	<!-- ================= 홍보게시판 ================= -->
	<!-- 홍보게시판 목록 -->
	<select id="selectBoardPromotionList" parameterType="map"
		resultType="map">
		SELECT *
		FROM (
		SELECT ROWNUM rn, a.*
		FROM (
		SELECT
		p.POST_NUMBER AS
		"postNumber",
		p.POST_TITLE AS "postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS "postViewCount",
		p.POST_LIKE_COUNT AS
		"postLikeCount"
		FROM TBL_POST p
		JOIN TBL_PROMO_BOARD pr ON
		pr.POST_NUMBER
		= p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON
		m.MEMBER_NUMBER
		=
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'PROMOTION'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
		ORDER BY p.POST_NUMBER DESC
		) a
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rn
		&gt;= #{startRow}
	</select>

	<!-- 홍보게시판 전체 글 개수 -->
	<select id="countBoardPromotion" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_PROMO_BOARD pr ON
		pr.POST_NUMBER
		= p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON
		m.MEMBER_NUMBER
		=
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'PROMOTION'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
	</select>

	<!-- 홍보게시판 상세 -->
	<select id="selectBoardPromotionDetail" parameterType="int"
		resultType="map">
		SELECT
		p.POST_NUMBER AS "postNumber",
		p.POST_TITLE AS
		"postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE,
		'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS
		"postViewCount",
		p.POST_LIKE_COUNT AS "postLikeCount",
		pr.PROMO_CONTENT
		AS "promoContent"
		FROM TBL_POST p
		JOIN TBL_PROMO_BOARD pr ON
		pr.POST_NUMBER = p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON
		m.MEMBER_NUMBER
		= p.MEMBER_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<!-- 홍보게시판 삭제 -->
	<delete id="deleteBoardPromotion" parameterType="int">
		DELETE FROM
		TBL_POST WHERE POST_NUMBER = #{postNumber}
	</delete>

	<!-- ================= 레시피게시판 ================= -->
	<!-- 레시피게시판 목록 -->
	<select id="selectBoardRecipeList" parameterType="map"
		resultType="map">
		SELECT *
		FROM (
		SELECT ROWNUM rn, a.*
		FROM (
		SELECT
		p.POST_NUMBER AS
		"postNumber",
		p.POST_TITLE AS "postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE, 'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS "postViewCount",
		p.POST_LIKE_COUNT AS
		"postLikeCount"
		FROM TBL_POST p
		JOIN TBL_RECIPE_BOARD r ON r.POST_NUMBER
		= p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER =
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'RECIPE'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
		ORDER BY p.POST_NUMBER DESC
		) a
		WHERE ROWNUM &lt;= #{endRow}
		)
		WHERE rn
		&gt;= #{startRow}
	</select>

	<!-- 레시피게시판 전체 글 개수 -->
	<select id="countBoardRecipe" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_POST p
		JOIN TBL_RECIPE_BOARD r ON r.POST_NUMBER
		= p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER =
		p.MEMBER_NUMBER
		WHERE p.POST_TYPE = 'RECIPE'
		<if test="searchWord != null and searchWord != ''">
			AND (
			p.POST_TITLE LIKE '%' || #{searchWord} || '%'
			OR
			m.MEMBER_ID LIKE '%' || #{searchWord} || '%'
			)
		</if>
	</select>

	<!-- 레시피게시판 상세 -->
	<select id="selectBoardRecipeDetail" parameterType="int"
		resultType="map">
		SELECT
		p.POST_NUMBER AS "postNumber",
		p.POST_TITLE AS
		"postTitle",
		m.MEMBER_ID AS "memberId",
		TO_CHAR(p.POST_CREATED_DATE,
		'YYYY-MM-DD') AS "postCreatedDate",
		p.POST_VIEW_COUNT AS
		"postViewCount",
		p.POST_LIKE_COUNT AS "postLikeCount",
		r.RECIPE_CONTENT
		AS "recipeContent"
		FROM TBL_POST p
		JOIN TBL_RECIPE_BOARD r ON
		r.POST_NUMBER = p.POST_NUMBER
		LEFT JOIN TBL_MEMBER m ON m.MEMBER_NUMBER
		= p.MEMBER_NUMBER
		WHERE p.POST_NUMBER = #{postNumber}
	</select>

	<!-- 레시피게시판 삭제 -->
	<delete id="deleteBoardRecipe" parameterType="int">
		DELETE FROM
		TBL_POST
		WHERE POST_NUMBER = #{postNumber}
	</delete>

	<select id="selectLatestEventBanner" resultType="map">
		SELECT *
		FROM (
		SELECT
		p.POST_NUMBER AS postNumber,
		p.POST_TITLE AS postTitle,
		i.ADMIN_IMAGE_SYSTEM_NAME AS systemName,
		i.ADMIN_IMAGE_ORIGINAL_NAME AS
		originalName
		FROM TBL_POST p
		JOIN TBL_NOTICE n ON n.POST_NUMBER =
		p.POST_NUMBER
		LEFT JOIN TBL_ADMIN_IMAGE i ON i.POST_NUMBER =
		p.POST_NUMBER
		WHERE p.POST_TYPE = 'NOTICE'
		AND p.POST_TITLE LIKE
		'[이벤트]%'
		ORDER BY p.POST_CREATED_DATE DESC
		)
		WHERE ROWNUM = 1
	</select>

	<!-- 문의 댓글 등록 -->
	<!-- 댓글 등록 -->
	<!-- <insert id="insertInquiryComment" parameterType="InquiryCommentDTO"> 
		INSERT INTO TBL_INQUIRY_COMMENT (COMMENT_NUMBER, POST_NUMBER, MEMBER_NUMBER, 
		COMMENT_CONTENT, COMMENT_CREATED_DATE) VALUES (SEQ_INQUIRY_COMMENT.NEXTVAL, 
		#{postNumber}, #{memberNumber}, #{commentContent}, SYSDATE) </insert> -->

	<!-- 문의 댓글 등록 -->
	<insert id="insertInquiryComment"
		parameterType="InquiryCommentDTO">
		<selectKey resultType="int" keyProperty="commentNumber"
			order="BEFORE">
			SELECT SEQ_COMMENT_NUMBER.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TBL_COMMENT
		(COMMENT_NUMBER, POST_NUMBER, MEMBER_NUMBER,
		ADMIN_NUMBER, COMMENT_CONTENT,
		COMMENTED_DATE, COMMENT_DELETE_STATE)
		VALUES (#{commentNumber}, #{postNumber}, #{memberNumber},
		#{adminNumber},
		#{commentContent}, SYSDATE, 'N')
	</insert>


	<!-- 댓글 등록시 상태 자동 변경 -->
	<update id="updateInquiryStatusAuto" parameterType="int">
		UPDATE
		TBL_INQUIRY
		SET INQUIRY_STATUS = 'IN_PROGRESS'
		WHERE POST_NUMBER =
		#{postNumber}
		AND INQUIRY_STATUS = 'YET'
	</update>


	<select id="selectInquiryComments" parameterType="int"
		resultType="InquiryCommentDTO">
		SELECT
		c.COMMENT_NUMBER AS commentNumber,
		c.POST_NUMBER AS
		postNumber,
		c.MEMBER_NUMBER AS memberNumber,
		c.ADMIN_NUMBER AS
		adminNumber,
		c.COMMENT_CONTENT AS commentContent,
		TO_CHAR(c.COMMENTED_DATE, 'YYYY-MM-DD HH24:MI:SS') AS commentedDate,
		c.COMMENT_DELETE_STATE AS commentDeleteState,
		a.ADMIN_ID AS adminId
		FROM
		TBL_COMMENT c
		LEFT JOIN TBL_ADMIN a ON a.ADMIN_NUMBER =
		c.ADMIN_NUMBER
		WHERE c.POST_NUMBER = #{postNumber}
		ORDER BY
		c.COMMENTED_DATE ASC
	</select>

	<!-- ===================== 대시보드 - 최근 가입자 ===================== -->
	<select id="selectRecentMembers" resultType="map">
		SELECT *
		FROM (
		SELECT
		m.MEMBER_NUMBER AS memberNumber,
		m.MEMBER_ID AS memberId,
		m.MEMBER_TYPE AS memberType,
		CASE
		WHEN m.MEMBER_TYPE = 'GENERAL' THEN
		TO_CHAR(g.GENERAL_JOIN_DATE,
		'YYYY-MM-DD')
		WHEN m.MEMBER_TYPE = 'SELLER'
		THEN TO_CHAR(s.SELLER_JOIN_DATE,
		'YYYY-MM-DD')
		END AS joinDate
		FROM
		TBL_MEMBER m
		LEFT JOIN TBL_GENERAL_MEMBER g ON g.MEMBER_NUMBER =
		m.MEMBER_NUMBER
		LEFT JOIN TBL_SELLER_MEMBER s ON s.MEMBER_NUMBER =
		m.MEMBER_NUMBER
		ORDER BY
		CASE
		WHEN m.MEMBER_TYPE = 'GENERAL' THEN
		g.GENERAL_JOIN_DATE
		WHEN m.MEMBER_TYPE = 'SELLER' THEN
		s.SELLER_JOIN_DATE
		END DESC
		)
		WHERE ROWNUM &lt;= 3
	</select>



	<!-- ===================== 대시보드 - 최근 주문 ===================== -->
	<select id="selectRecentOrders" resultType="map">
		SELECT *
		FROM (
		SELECT
		o.ORDERS_NUMBER AS ordersNumber,
		m.MEMBER_ID AS memberId,
		o.ORDERS_TOTAL_AMOUNT AS totalAmount,
		TO_CHAR(o.ORDERS_DATE,
		'YYYY-MM-DD') AS orderDate
		FROM TBL_ORDERS o
		JOIN TBL_MEMBER m ON
		m.MEMBER_NUMBER = o.ORDERS_MEMBER_NUMBER
		ORDER BY o.ORDERS_DATE DESC
		)
		WHERE ROWNUM &lt;= 3
	</select>




</mapper>