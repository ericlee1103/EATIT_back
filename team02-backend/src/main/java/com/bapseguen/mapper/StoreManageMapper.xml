<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="storeManage">

	<!-- 마지막 아이템 번호 불러오기 -->
	<select id="getItemNumber" resultType="int">
	SELECT SEQ_ITEM_NUMBER.currval FROM dual
	</select>


	<!-- 음식 판매 등록 -->
	<insert id="addFood" parameterType="ItemInsertDTO">
		<selectKey keyProperty="itemNumber" resultType="int" order="BEFORE">
			SELECT SEQ_ITEM_NUMBER.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO TBL_ITEM (
			item_number,business_number,item_type,item_name,item_price,item_content,
			item_quantity, item_expire_date,item_created_time, ITEM_SELL_STATE
		) VALUES (
			#{itemNumber},#{businessNumber},'FOOD',#{itemName},#{itemPrice},#{itemContent},
			#{itemQuantity},SYSDATE+1,SYSDATE, #{itemSellState}
		)
	</insert>


	<!-- 음식 판매 상세 조회 -->
	<select id="detailItem" parameterType="int" resultType="ItemInsertDTO">
		
		SELECT
		    i.ITEM_NUMBER AS itemNumber,
		    i.BUSINESS_NUMBER AS businessNumber,
		    i.ITEM_TYPE AS itemType,
		    i.ITEM_NAME AS itemName,
		    i.ITEM_PRICE AS itemPrice,
		    i.ITEM_CONTENT AS itemContent,
		    i.ITEM_QUANTITY AS itemQuantity,
		    TO_CHAR(i.ITEM_EXPIRE_DATE,'YYYY-MM-DD') AS itemExpireDate,
		    i.ITEM_CREATED_TIME AS itemCreatedTime,
		    i.ITEM_UPDATED_TIME AS itemUpdatedTime,
		    i.ITEM_SELL_STATE AS itemSellState
		FROM TBL_ITEM i
		WHERE i.ITEM_NUMBER = #{itemNumber}
		
	</select>
	<select id="detailItemList" parameterType="int" resultType="ItemListDTO">
		
		SELECT
		    i.ITEM_NUMBER AS itemNumber,
		    i.BUSINESS_NUMBER AS businessNumber,
		    i.ITEM_TYPE AS itemType,
		    i.ITEM_NAME AS itemName,
		    i.ITEM_PRICE AS itemPrice,
		    i.ITEM_CONTENT AS itemContent,
		    i.ITEM_QUANTITY AS itemQuantity,
		    TO_CHAR(i.ITEM_EXPIRE_DATE,'YYYY-MM-DD') AS itemExpireDate,
		    i.ITEM_CREATED_TIME AS itemCreatedTime,
		    i.ITEM_UPDATED_TIME AS itemUpdatedTime,
		    i.ITEM_SELL_STATE AS itemSellState
		FROM TBL_ITEM i
		WHERE i.ITEM_NUMBER = #{itemNumber}
		
	</select>

	<!-- 음식 판매 수정 -->
	<update id="editFood" parameterType="itemInsertDTO">
		UPDATE TBL_ITEM SET
			ITEM_NAME	= #{itemName}, 
			ITEM_PRICE 	= #{itemPrice}, 
			ITEM_CONTENT	= #{itemContent},
			ITEM_QUANTITY 	= #{itemQuantity}, 
			ITEM_UPDATED_TIME 	= SYSDATE,
			ITEM_EXPIRE_DATE 	= to_DATE(#{itemExpireDate},'yyyy-MM-DD'),
			ITEM_SELL_STATE 	= #{itemSellState}
		WHERE ITEM_NUMBER 	= #{itemNumber}
		-- AND ITEM_TYPE = 'FOOD'
	</update>

	<!-- 음식 판매 삭제 -->
	<delete id="deleteFood" parameterType="int">
		DELETE FROM tbl_item
		where item_number = #{itemNumber}
		and item_type = 'FOOD'
	</delete>

	<!-- 음식 목록 조회 -->
	<select id="foodList" parameterType="Map" resultType="ItemWithImgDTO">
	<![CDATA[
		SELECT * FROM (
			SELECT ROWNUM AS RNUM, SUBQUERY.* FROM (
				SELECT 
					i.item_number, 
					i.item_name,
					i.item_price,
					i.item_content,
					i.item_quantity,
					i.item_expire_date,
					im.item_image_system_name
				FROM TBL_ITEM i
				JOIN TBL_STORE s ON i.business_number = s.business_number
				LEFT JOIN TBL_ITEM_IMAGE im ON i.item_number = im.item_number
				WHERE i.business_number = #{businessNumber} and item_type = 'FOOD'
				ORDER BY i.item_number DESC
			) SUBQUERY
		) WHERE RNUM BETWEEN #{startRow} AND #{endRow}
		
	]]>
	</select>
	<!-- 음식 판매 개수 조회 -->
	<select id="foodCount"	resultType="int">
	<![CDATA[
	SELECT count(*) 
	FROM TBL_ITEM i
	JOIN TBL_STORE s ON i.business_number = s.business_number
	LEFT JOIN TBL_ITEM_IMAGE im ON i.item_number = im.item_number
	WHERE i.business_number = #{businessNumber} and item_type = 'FOOD'
	]]>
	</select>



	<!-- 재료 판매 등록 -->
	<insert id="addIngredient" parameterType="ItemInsertDTO">
		<selectKey keyProperty="itemNumber" resultType="int" order="BEFORE">
			SELECT SEQ_ITEM_NUMBER.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO TBL_ITEM (
			item_number,business_number,item_type,item_name,item_price,item_content,
			item_quantity, item_expire_date,item_created_time, ITEM_SELL_STATE
		) VALUES (
			#{itemNumber},#{businessNumber},'INGREDIENT',#{itemName},#{itemPrice},#{itemContent},
			#{itemQuantity}, #{itemExpireDate}, SYSDATE, #{itemSellState}
		)
	</insert>
	<!-- 재료 판매 상세 조회 -->
	<select id="detaileIngredient" parameterType="ItemListDTO">
		select
		item_name,item_price,item_content,item_quantity,item_expire_date, item_sell_state
		from tbl_item
		where item_number =	#{itemNumber}
	</select>
	<!-- 재료 판매 수정 -->
	<update id="editIngredient" parameterType="ItemInsertDTO">
		UPDATE TBL_ITEM SET
		ITEM_NAME= #{itemName}, ITEM_PRICE = #{itemPrice}, ITEM_CONTENT	= #{itemContent},
		ITEM_QUANTITY = #{itemQuantity}, ITEM_UPDATED_TIME = SYSDATE
		WHERE ITEM_NUMBER =	#{itemNumber}
		AND ITEM_TYPE = 'INGREDIENT'
	</update>
	<!-- 재료 판매 삭제 -->
	<delete id="deleteingredient" parameterType="int">
		DELETE FROM tbl_item
		where item_number = #{itemNumber}
		and item_type = 'INGREDIENT'
	</delete>

	<!-- 재료 판매 목록 조회 -->
	<select id="ingredientList"	parameterType="Map" resultType="ItemWithImgDTO">
	<![CDATA[
	SELECT * FROM (
		SELECT ROWNUM AS RNUM, SUBQUERY.* FROM(
		SELECT
				i.item_number, i.item_name,i.item_price,i.item_content,i.item_quantity,i.item_expire_date,
				im.item_image_system_name
			FROM TBL_ITEM i
			JOIN TBL_STORE s ON i.business_number = s.business_number
			LEFT JOIN TBL_ITEM_IMAGE im ON i.item_number = im.item_number
			WHERE i.business_number = #{businessNumber} and item_type = 'INGREDIENT'
			ORDER BY i.item_number DESC
			)SUBQUERY
		) WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	]]>
	</select>
	<!-- 재료 판매 개수 조회 -->
	<select id="ingredientCount"  resultType="int">
	<![CDATA[
	SELECT count(*) 
	FROM TBL_ITEM i
	JOIN TBL_STORE s ON i.business_number = s.business_number
	LEFT JOIN TBL_ITEM_IMAGE im ON i.item_number = im.item_number
	WHERE i.business_number = #{businessNumber} and item_type = 'INGREDIENT'
	]]>
	</select>

	<!-- 움삭 메뉴 중복 확인 -->
	<select id="alreadyfood" parameterType="ItemDTO" resultType="int">
		select count(item_number) from tbl_item
		where item_name =	#{itemName} 
		and item_type = 'FOOD' 
		and business_number = #{businessNumber}
	</select>

	<!-- 음식 사진 등록 -->
	<insert id="addItemImage" parameterType="Map">
		<selectKey keyProperty="ItemImageNumber" resultType="int">
			select seq_item_image_number.nextval from dual
		</selectKey>
		INSERT INTO TBL_ITEM_IMAGE (
			item_image_number,
			ITEM_NUMBER,
			ITEM_IMAGE_SYSTEM_NAME,
			ITEM_IMAGE_ORIGINAL_NAME
		)
		SELECT
			#{itemImageNumber},
			#{itemNumber},
			#{itemImageSystemName},
			#{itemImageOriginalName}
		FROM DUAL
	</insert>
	<!-- 음식 사진 등록 -->

	<!-- 가게 정보 조회 -->
	<!-- 가게 정보 조회 -->
	<select id="selectStoreInfo" parameterType="String"	resultType="StoreDTO">
		SELECT
			business_number,
			member_number,
			store_name,
			store_open_date,
			store_tel,
			store_address,
			store_address_detail,
			store_zip_code
		FROM tbl_store
		WHERE business_number = #{businessNumber}
	</select>


	<!-- 판매내역 -->
	<!-- 오늘 판매 내역 -->
	<select id="todaySaleList" parameterType="map" resultType="SaleHistoryDTO">
	  <![CDATA[
	  SELECT *
	  FROM (
	    SELECT ROWNUM AS rnum, subq.*
	    FROM (
	      SELECT
	        o.orders_number                                   AS ordersNumber,
	        TO_CHAR(o.orders_date, 'YYYY-MM-DD')             AS ordersDate,
	        i.item_name                                      AS itemName,
	        i.item_type                                      AS itemType,
	        oi.order_item_unit_price                         AS unitPrice,
	        oi.order_item_quantity                           AS quantity,
	        (oi.order_item_unit_price * oi.order_item_quantity) AS ordersTotalAmount,
	        /* 구매자 ID/전화는 스칼라 서브쿼리로 */
	        (SELECT m.member_id
	           FROM TBL_MEMBER m
	          WHERE m.member_number = o.orders_member_number)    AS memberId,
	        /* 주문 단위 평균 평점(필요시 MAX로 변경 가능) */
	        (SELECT ROUND(AVG(r.review_rating), 1)
	           FROM TBL_REVIEW r
	          WHERE r.orders_number = o.orders_number)           AS reviewRating
	      FROM TBL_ORDERS o
	      JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	      JOIN TBL_ITEM       i  ON oi.item_number   = i.item_number
	      WHERE i.business_number = #{businessNumber}
	        AND o.orders_payment_status = 'PAID'
	        AND TRUNC(o.orders_date) = TRUNC(SYSDATE)
	      ORDER BY o.orders_date DESC, o.orders_number DESC
	    ) subq
	  )
	  WHERE rnum BETWEEN #{startRow} AND #{endRow}
	  ]]>
	</select>
	
	<!-- 오늘 판매 내역 수 -->
		<select id="todaySaleCount" parameterType="map" resultType="int">
	  <![CDATA[
	  SELECT COUNT(*)
	  FROM (
	    /* 목록과 동일한 조인/조건으로 '행 수(라인 수)'를 카운트 */
	    SELECT 1
	    FROM TBL_ORDERS o
	    JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	    JOIN TBL_ITEM       i  ON oi.item_number   = i.item_number
	    WHERE i.business_number = #{businessNumber}
	      AND o.orders_payment_status = 'PAID'
	      AND TRUNC(o.orders_date) = TRUNC(SYSDATE)
	  )
	  ]]>
	</select>
	

	<!-- 판매내역 목록(페이징) : if 없이, PAID 고정 -->
	<select id="salesHistoryList" parameterType="map" resultType="SaleHistoryDTO">
	  <![CDATA[
	  SELECT *
	  FROM (
	    SELECT ROWNUM AS rnum, subq.*
	    FROM (
	      SELECT
	        o.orders_number                                  AS ordersNumber,
	        TO_CHAR(o.orders_date, 'YYYY-MM-DD')             AS ordersDate,
	        i.item_name                                      AS itemName,
	        i.item_type                                      AS itemType,
	        oi.order_item_unit_price                         AS unitPrice,
	        oi.order_item_quantity                           AS quantity,
	        (oi.order_item_unit_price * oi.order_item_quantity) AS ordersTotalAmount,
	        (SELECT m.member_id
	           FROM TBL_MEMBER m
	          WHERE m.member_number = o.orders_member_number)    AS memberId,
	        (SELECT ROUND(AVG(r.review_rating), 1)
	           FROM TBL_REVIEW r
	          WHERE r.orders_number = o.orders_number)           AS reviewRating
	      FROM TBL_ORDERS o
	      JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	      JOIN TBL_ITEM       i  ON oi.item_number   = i.item_number
	      WHERE i.business_number = #{businessNumber}
	        AND o.orders_payment_status = 'PAID'
	      ORDER BY o.orders_date DESC, o.orders_number DESC
	    ) subq
	  )
	  WHERE rnum BETWEEN #{startRow} AND #{endRow}
	  ]]>
	</select>
	
	<!-- 총 건수(페이징 계산용) : if 없이, PAID 고정 -->
	<select id="salesHistoryCount" parameterType="map" resultType="int">
	  <![CDATA[
	  SELECT COUNT(*)
	  FROM (
	    SELECT o.orders_number
	    FROM TBL_ORDERS o
	    JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	    JOIN TBL_ITEM       i  ON oi.item_number   = i.item_number
	    WHERE i.business_number = #{businessNumber}
	      AND o.orders_payment_status = 'PAID'
	    GROUP BY o.orders_number
	  )
	  ]]>
	</select>

	<!-- 요약카드 -->
	<select id="saleSummary" parameterType="map" resultType="map">
	  <![CDATA[
	  SELECT
	    /* 오늘 */
	    NVL((
	      SELECT SUM(oi.order_item_quantity * i.item_price)
	      FROM TBL_ORDERS o
	      JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	      JOIN TBL_ITEM i ON oi.item_number = i.item_number
	      WHERE i.business_number = #{businessNumber}
	        AND TRUNC(o.orders_date) = TRUNC(SYSDATE)
	        AND o.orders_payment_status = 'PAID'
	    ),0) AS "todayAmount",
	    /* 이번달 */
	    NVL((
	      SELECT SUM(oi.order_item_quantity * i.item_price)
	      FROM TBL_ORDERS o
	      JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	      JOIN TBL_ITEM i ON oi.item_number = i.item_number
	      WHERE i.business_number = #{businessNumber}
	        AND TO_CHAR(o.orders_date,'YYYY-MM') = TO_CHAR(SYSDATE,'YYYY-MM')
	        AND o.orders_payment_status = 'PAID'
	    ),0) AS "monthAmount",
	    /* 누적 */
	    NVL((
	      SELECT SUM(oi.order_item_quantity * i.item_price)
	      FROM TBL_ORDERS o
	      JOIN TBL_ORDER_ITEM oi ON o.orders_number = oi.orders_number
	      JOIN TBL_ITEM i ON oi.item_number = i.item_number
	      WHERE i.business_number = #{businessNumber}
	        AND o.orders_payment_status = 'PAID'
	    ),0) AS "totalAmount"
	  FROM DUAL
	  ]]>
	</select>

	
	
	
</mapper>